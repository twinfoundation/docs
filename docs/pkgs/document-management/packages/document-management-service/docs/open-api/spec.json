{
	"openapi": "3.1.1",
	"info": {
		"title": "TWIN - Test Endpoints",
		"description": "REST API for TWIN - Test Endpoints.",
		"version": "1.0.0",
		"license": {
			"name": "Apache 2.0 License",
			"url": "https://opensource.org/licenses/Apache-2.0"
		}
	},
	"servers": [
		{
			"url": "https://localhost"
		}
	],
	"tags": [
		{
			"name": "Document Management",
			"description": "Endpoints which are modelled to access a document management contract."
		}
	],
	"paths": {
		"/document-management": {
			"post": {
				"operationId": "DocumentManagementSet",
				"summary": "Store a document in an auditable item graph vertex and add its content to blob storage.",
				"tags": [
					"Document Management"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a document as an auditable item graph vertex.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DocumentManagementCreateRequest"
							},
							"examples": {
								"DocumentManagementCreateRequestExample": {
									"value": {
										"documentId": "2721000",
										"documentIdFormat": "bol",
										"documentCode": "unece:DocumentCodeList#705",
										"blob": "SGVsbG8gV29ybGQ=",
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "DigitalDocument",
											"name": "myfile.pdf"
										},
										"createAttestation": true
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. aig:123456"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "DocumentManagementQuery",
				"summary": "Query the items from an auditable item graph vertex",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "documentId",
						"description": "The id of the document id we are trying to find.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "2721000"
					},
					{
						"name": "cursor",
						"description": "The cursor to get the next chunk of documents.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The number of documents to return.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to query the documents from an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertexList"
								},
								"examples": {
									"DocumentManagementQueryResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/aig/"
											],
											"type": [
												"ItemList",
												"AuditableItemGraphVertexList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/"
													],
													"id": "aig:c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7",
													"type": "AuditableItemGraphVertex",
													"dateCreated": "2024-08-22T04:13:20.000Z",
													"aliases": [
														{
															"@context": [
																"https://schema.twindev.org/aig/"
															],
															"id": "test-id-0",
															"type": "AuditableItemGraphAlias",
															"dateCreated": "2024-08-22T04:13:20.000Z"
														}
													],
													"resources": [
														{
															"@context": "https://schema.twindev.org/aig/",
															"type": "AuditableItemGraphResource",
															"dateCreated": "2024-08-22T04:13:20.000Z",
															"resourceObject": {
																"@context": [
																	"https://schema.twindev.org/documents/",
																	"https://schema.twindev.org/common/",
																	"https://schema.org"
																],
																"type": "Document",
																"id": "test-id-0:0",
																"documentId": "test-id-0",
																"documentCode": "unece:DocumentCodeList#705",
																"documentRevision": 0,
																"annotationObject": {
																	"@context": "https://schema.org",
																	"type": "DigitalDocument",
																	"name": "bill-of-lading"
																},
																"blobHash": "sha256:E3Duqrp6bHojSx+CzDttAToAiP1eFkCDAPBbKLABVGM=",
																"blobStorageId": "blob:memory:1370eeaaba7a6c7a234b1f82cc3b6d013a0088fd5e16408300f05b28b0015463",
																"dateCreated": "2024-08-22T04:13:20.000Z",
																"nodeIdentity": "did:entity-storage:0x0101010101010101010101010101010101010101010101010101010101010101",
																"userIdentity": "did:entity-storage:0x0404040404040404040404040404040404040404040404040404040404040404"
															}
														}
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/document-management/{auditableItemGraphDocumentId}": {
			"put": {
				"operationId": "DocumentManagementUpdate",
				"summary": "Update a document in an auditable item graph vertex and add its content to blob storage.",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "The full id of the document to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:123456"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to update a document as an auditable item graph vertex.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DocumentManagementUpdateRequest"
							},
							"examples": {
								"DocumentManagementUpdateRequestExample": {
									"value": {
										"blob": "SGVsbG8gV29ybGQ=",
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "DigitalDocument",
											"name": "myfile.pdf"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "DocumentManagementGet",
				"summary": "Get the data for a document from document management",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "The full id of the document to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:123456"
					},
					{
						"name": "includeBlobStorageMetadata",
						"description": "Include the blob storage metadata in the response.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "includeBlobStorageData",
						"description": "Include the blob storage data in the response.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "includeAttestation",
						"description": "Include the attestation information in the response.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "includeRemoved",
						"description": "Include deleted documents in the response.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "extractRuleGroupId",
						"description": "If provided will extract data from the document using the specified rule group id.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "extractMimeType",
						"description": "By default extraction will auto detect the mime type of the document, this can be used to override the detection.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "Page size of items to return, defaults to 1 so only most recent is returned.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "The cursor to get the next chunk of revisions.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get a document and optionally revisions from an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DocumentList"
								},
								"examples": {
									"DocumentManagementGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/documents/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "Document",
													"id": "2721000:0",
													"documentId": "2721000",
													"documentIdFormat": "bol",
													"documentCode": "unece:DocumentCodeList#705",
													"documentRevision": 0,
													"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"blobHash": "sha256:123456",
													"dateCreated": "2024-01-01T00:00:00Z",
													"annotationObject": {
														"@context": "https://schema.org",
														"@type": "DigitalDocument",
														"name": "myfile.pdf"
													},
													"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
													"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
												}
											]
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "#/components/schemas/DocumentList"
								},
								"examples": {
									"DocumentManagementGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/documents/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "Document",
													"id": "2721000:0",
													"documentId": "2721000",
													"documentIdFormat": "bol",
													"documentCode": "unece:DocumentCodeList#705",
													"documentRevision": 0,
													"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"blobHash": "sha256:123456",
													"dateCreated": "2024-01-01T00:00:00Z",
													"annotationObject": {
														"@context": "https://schema.org",
														"@type": "DigitalDocument",
														"name": "myfile.pdf"
													},
													"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
													"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/document-management/{auditableItemGraphDocumentId}/{revision}": {
			"get": {
				"operationId": "DocumentManagementGetRevision",
				"summary": "Get the data for a document revision from document management",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:123456"
					},
					{
						"name": "revision",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get a document revision from an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Document"
								},
								"examples": {
									"DocumentManagementGetRevisionResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Document",
											"id": "2721000:0",
											"documentId": "2721000",
											"documentIdFormat": "bol",
											"documentCode": "unece:DocumentCodeList#705",
											"documentRevision": 1,
											"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"blobHash": "sha256:123456",
											"dateCreated": "2024-01-01T00:00:00Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "DigitalDocument",
												"name": "myfile.pdf"
											},
											"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
											"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "#/components/schemas/Document"
								},
								"examples": {
									"DocumentManagementGetRevisionResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Document",
											"id": "2721000:0",
											"documentId": "2721000",
											"documentIdFormat": "bol",
											"documentCode": "unece:DocumentCodeList#705",
											"documentRevision": 1,
											"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"blobHash": "sha256:123456",
											"dateCreated": "2024-01-01T00:00:00Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "DigitalDocument",
												"name": "myfile.pdf"
											},
											"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
											"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DocumentManagementRemove",
				"summary": "Remove an document from an auditable item graph vertex",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "The id of the auditable item graph vertex to remove the revision from.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:1234"
					},
					{
						"name": "revision",
						"description": "The revision of the document to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Document": {
				"type": "object",
				"properties": {
					"@context": {
						"type": "array",
						"minItems": 3,
						"items": {
							"$ref": "https://schema.twindev.org/json-ld/JsonLdContextDefinitionElement"
						},
						"description": "JSON-LD Context.",
						"prefixItems": [
							{
								"type": "string",
								"const": "https://schema.twindev.org/documents/"
							},
							{
								"type": "string",
								"const": "https://schema.twindev.org/common/"
							},
							{
								"type": "string",
								"const": "https://schema.org"
							}
						]
					},
					"type": {
						"type": "string",
						"const": "Document",
						"description": "JSON-LD Type."
					},
					"id": {
						"type": "string",
						"description": "The full id of the document."
					},
					"documentId": {
						"type": "string",
						"description": "The id of the document."
					},
					"documentIdFormat": {
						"type": "string",
						"description": "The format of the document id."
					},
					"documentCode": {
						"$ref": "https://schema.twindev.org/unece/UneceDocumentCodes"
					},
					"documentRevision": {
						"type": "number",
						"description": "The revision of the document as a 0 based index."
					},
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"blobStorageId": {
						"type": "string",
						"description": "The blob storage id for the document."
					},
					"blobHash": {
						"type": "string",
						"description": "The hash of the blob data."
					},
					"blobStorageEntry": {
						"$ref": "https://schema.twindev.org/blob-storage/BlobStorageEntry"
					},
					"extractedData": {
						"description": "The data extracted from the document using data extraction services."
					},
					"attestationId": {
						"type": "string",
						"description": "The attestation for the document if one was created."
					},
					"attestationInformation": {
						"$ref": "https://schema.twindev.org/attestation/AttestationInformation"
					},
					"dateCreated": {
						"type": "string",
						"description": "The date/time of when the document was created."
					},
					"dateModified": {
						"type": "string",
						"description": "The date/time of when the document was modified."
					},
					"dateDeleted": {
						"type": "string",
						"description": "The date/time of when the document was deleted, as we never actually remove items."
					},
					"nodeIdentity": {
						"type": "string",
						"description": "The node which added the document to the graph."
					},
					"userIdentity": {
						"type": "string",
						"description": "The user who added the document to the graph."
					}
				},
				"required": [
					"@context",
					"type",
					"id",
					"documentId",
					"documentCode",
					"documentRevision",
					"blobStorageId",
					"blobHash",
					"dateCreated",
					"nodeIdentity",
					"userIdentity"
				],
				"additionalProperties": false,
				"description": "Interface describing a document."
			},
			"DocumentList": {
				"type": "object",
				"properties": {
					"@context": {
						"type": "array",
						"minItems": 3,
						"items": {
							"$ref": "https://schema.twindev.org/json-ld/JsonLdContextDefinitionElement"
						},
						"description": "JSON-LD Context.",
						"prefixItems": [
							{
								"type": "string",
								"const": "https://schema.org"
							},
							{
								"type": "string",
								"const": "https://schema.twindev.org/documents/"
							},
							{
								"type": "string",
								"const": "https://schema.twindev.org/common/"
							}
						]
					},
					"type": {
						"type": "string",
						"const": "ItemList",
						"description": "JSON-LD Type."
					},
					"itemListElement": {
						"type": "array",
						"items": false,
						"description": "The list of documents.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/Document"
							}
						]
					},
					"edges": {
						"type": "array",
						"items": false,
						"description": "The ids of the other vertices which are connected to the document.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					},
					"nextItem": {
						"type": "string",
						"description": "The cursor to get the next chunk of documents."
					}
				},
				"required": [
					"@context",
					"type",
					"itemListElement"
				],
				"additionalProperties": false,
				"description": "Interface describing a list of document entries."
			},
			"DocumentManagementCreateRequest": {
				"type": "object",
				"properties": {
					"documentId": {
						"type": "string",
						"description": "The document id to create."
					},
					"documentIdFormat": {
						"type": "string",
						"description": "The format of the document identifier."
					},
					"documentCode": {
						"$ref": "https://schema.twindev.org/unece/UneceDocumentCodes"
					},
					"blob": {
						"type": "string",
						"description": "The data to create the document with, in base64."
					},
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"auditableItemGraphEdges": {
						"type": "array",
						"items": false,
						"description": "The auditable item graph vertices to connect the document to.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"addAlias": {
										"type": "boolean"
									},
									"aliasAnnotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id"
								],
								"additionalProperties": false
							}
						]
					},
					"createAttestation": {
						"type": "boolean",
						"description": "Flag to create an attestation for the document, defaults to false."
					},
					"addAlias": {
						"type": "boolean",
						"description": "Flag to add the document id as an alias to the aig vertex, defaults to true."
					},
					"aliasAnnotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"documentId",
					"documentCode",
					"blob"
				],
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"DocumentManagementUpdateRequest": {
				"type": "object",
				"properties": {
					"blob": {
						"type": "string",
						"description": "The data to create the document with, in base64."
					},
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"auditableItemGraphEdges": {
						"type": "array",
						"items": false,
						"description": "The auditable item graph vertices to connect the document to.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"addAlias": {
										"type": "boolean"
									},
									"aliasAnnotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id"
								],
								"additionalProperties": false
							}
						]
					}
				},
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"Error": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"name",
					"message"
				],
				"additionalProperties": false,
				"description": "Model to describe serialized error."
			},
			"NotFoundResponse": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"notFoundId": {
						"type": "string",
						"description": "The id if the item that was not found."
					},
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"message",
					"name"
				],
				"description": "The body which contains the error."
			}
		},
		"securitySchemes": {
			"jwtBearerAuthScheme": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
