{
	"openapi": "3.1.1",
	"info": {
		"title": "TWIN - Test Endpoints",
		"description": "REST API for TWIN - Test Endpoints.",
		"version": "1.0.0",
		"license": {
			"name": "Apache 2.0 License",
			"url": "https://opensource.org/licenses/Apache-2.0"
		}
	},
	"servers": [
		{
			"url": "https://localhost"
		}
	],
	"tags": [
		{
			"name": "Policy Administration Point",
			"description": "Endpoints for managing ODRL policies in the Policy Administration Point"
		}
	],
	"paths": {
		"/rights-management/pap": {
			"post": {
				"operationId": "papCreate",
				"summary": "Create a policy",
				"tags": [
					"Policy Administration Point"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "The request structure for creating a policy.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlPolicy"
							},
							"examples": {
								"papCreateExample": {
									"value": {
										"@context": "https://www.w3.org/ns/odrl/2/",
										"@type": "Set",
										"permission": [
											{
												"target": "http://example.com/asset/1",
												"action": "use"
											}
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. urn:rights-management:abc123def456"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/rights-management/pap/{id}": {
			"put": {
				"operationId": "papUpdate",
				"summary": "Update a policy",
				"tags": [
					"Policy Administration Point"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the policy to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "urn:rights-management:abc123def456"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "The request structure for updating a policy.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlPolicy"
							},
							"examples": {
								"papUpdateExample": {
									"value": {
										"@context": "https://www.w3.org/ns/odrl/2/",
										"@type": "Set",
										"uid": "urn:rights-management:abc123def456",
										"permission": [
											{
												"target": "http://example.com/asset/2",
												"action": "read"
											}
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "papRetrieve",
				"summary": "Retrieve a policy",
				"tags": [
					"Policy Administration Point"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the policy to retrieve.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "urn:rights-management:abc123def456"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "The response structure for retrieving a policy.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-odrl/OdrlPolicy"
								},
								"examples": {
									"papRetrieveResponseExample": {
										"value": {
											"@context": "https://www.w3.org/ns/odrl/2/",
											"@type": "Set",
											"uid": "urn:rights-management:abc123def456",
											"permission": [
												{
													"target": "http://example.com/asset/1",
													"action": "use"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "papRemove",
				"summary": "Remove a policy",
				"tags": [
					"Policy Administration Point"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the policy to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "urn:rights-management:abc123def456"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/rights-management/pap/query": {
			"get": {
				"operationId": "papQuery",
				"summary": "Query policies",
				"tags": [
					"Policy Administration Point"
				],
				"parameters": [
					{
						"name": "conditions",
						"description": "The condition for the query.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The number of entries to return per page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "The cursor to get next chunk of data, returned in previous response.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "optional-pagination-cursor"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "The response structure for querying policies.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PapQueryResponse"
								},
								"examples": {
									"papQueryResponseExample": {
										"value": {
											"cursor": "next-page-cursor",
											"policies": [
												{
													"@context": "https://www.w3.org/ns/odrl/2/",
													"@type": "Set",
													"uid": "urn:rights-management:abc123def456",
													"permission": [
														{
															"target": "http://example.com/asset/1",
															"action": "use"
														}
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/rights-management/pep/intercept": {
			"post": {
				"operationId": "pepIntercept",
				"summary": "Intercept a request",
				"tags": [
					"Policy Administration Point"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "The request structure for intercepting a request and enforcing a policy.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PepInterceptRequest"
							},
							"examples": {
								"pepInterceptExample": {
									"value": {
										"assetType": "document",
										"action": "view",
										"data": {
											"id": "document-1",
											"param1": 1,
											"param2": 2
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The response structure for intercepting a request and enforcing a policy.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PepInterceptResponse"
								},
								"examples": {
									"pepInterceptResponseExample": {
										"value": {
											"id": "document-1",
											"param1": 1
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Error": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"cause": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"name",
					"message"
				],
				"additionalProperties": false,
				"description": "Model to describe serialized error."
			},
			"OdrlPolicy": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "https://schema.twindev.org/w3c-odrl/OdrlContextType"
					},
					"@type": {
						"$ref": "https://schema.twindev.org/w3c-odrl/PolicyType"
					},
					"profile": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The profile(s) this policy conforms to. IRIs identifying the ODRL Profile(s)."
					},
					"assigner": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlParty"
							}
						],
						"description": "The assigner of the policy. Applies to all rules unless overridden at rule level."
					},
					"assignee": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlParty"
							}
						],
						"description": "The assignee of the policy. Applies to all rules unless overridden at rule level."
					},
					"target": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlAsset"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"anyOf": [
											{
												"type": "string"
											},
											{
												"$ref": "https://schema.twindev.org/w3c-odrl/OdrlAsset"
											}
										]
									}
								]
							}
						],
						"description": "The target asset for the rule."
					},
					"action": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/ActionType"
							},
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlAction"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"anyOf": [
											{
												"$ref": "https://schema.twindev.org/w3c-odrl/ActionType"
											},
											{
												"$ref": "https://schema.twindev.org/w3c-odrl/OdrlAction"
											}
										]
									}
								]
							}
						],
						"description": "The action associated with the rule."
					},
					"inheritFrom": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The parent policy(ies) this policy inherits from. IRIs identifying the parent Policy(ies)."
					},
					"conflict": {
						"$ref": "https://schema.twindev.org/w3c-odrl/ConflictStrategyType"
					},
					"permission": {
						"type": "array",
						"items": false,
						"description": "The permissions in the policy. At least one of permission, prohibition, or obligation must be present.",
						"prefixItems": [
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlPermission"
							}
						]
					},
					"prohibition": {
						"type": "array",
						"items": false,
						"description": "The prohibitions in the policy. At least one of permission, prohibition, or obligation must be present.",
						"prefixItems": [
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlProhibition"
							}
						]
					},
					"obligation": {
						"type": "array",
						"items": false,
						"description": "The obligations in the policy. At least one of permission, prohibition, or obligation must be present.",
						"prefixItems": [
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlDuty"
							}
						]
					},
					"@id": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@included": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@reverse": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@index": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					}
				},
				"required": [
					"@context",
					"@type",
					"@id",
					"@included",
					"@graph",
					"@nest",
					"@reverse",
					"@index"
				],
				"additionalProperties": false
			},
			"PapQueryResponse": {
				"type": "object",
				"properties": {
					"cursor": {
						"type": "string",
						"description": "The cursor for the next page of results, if there are more results available."
					},
					"policies": {
						"type": "array",
						"items": false,
						"description": "The policies matching the query.",
						"prefixItems": [
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlPolicy"
							}
						]
					}
				},
				"required": [
					"policies"
				],
				"additionalProperties": false,
				"description": "The body of the response."
			},
			"PepInterceptRequest": {
				"type": "object",
				"properties": {
					"assetType": {
						"type": "string",
						"description": "The type of the asset to enforce the policy on."
					},
					"action": {
						"type": "string",
						"description": "The action to perform on the asset."
					},
					"data": {
						"description": "The data to include in the request."
					}
				},
				"required": [
					"assetType",
					"action",
					"data"
				],
				"additionalProperties": false,
				"description": "The body parameters of the request."
			},
			"PepInterceptResponse": {
				"description": "The manipulated data with any policies applied."
			}
		},
		"securitySchemes": {
			"jwtBearerAuthScheme": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
