{
    "openapi": "3.1.0",
    "info": {
        "title": "TWIN Workbench Server",
        "description": "REST API for TWIN - API Server.",
        "version": "1.0.0",
        "license": {
            "name": "Apache 2.0 License",
            "url": "https://opensource.org/licenses/Apache-2.0"
        }
    },
    "servers": [
        {
            "url": "https://workbench-api.twindev.org"
        }
    ],
    "tags": [
        {
            "name": "Info",
            "description": "Information endpoints for the REST server."
        },
        {
            "name": "Authentication",
            "description": "Authentication endpoints for the REST server."
        },
        {
            "name": "Identity",
            "description": "Service to provide all features related to digital identity."
        },
        {
            "name": "Identity Profile",
            "description": "Service to provide all features related to digital identity profiles."
        },
        {
            "name": "Blob Storage",
            "description": "Endpoints which are modelled to access a blob storage contract."
        },
        {
            "name": "Telemetry",
            "description": "Endpoints which are modelled to access a telemetry contract."
        },
        {
            "name": "Logging",
            "description": "Endpoints which are modelled to access a logging contract."
        },
        {
            "name": "NFT",
            "description": "Endpoints which are modelled to access an NFT contract."
        },
        {
            "name": "Attestation",
            "description": "Endpoints which are modelled to access an attestation contract."
        },
        {
            "name": "Auditable Item Graph",
            "description": "Endpoints which are modelled to access an auditable item graph contract."
        },
        {
            "name": "Auditable Item Stream",
            "description": "Endpoints which are modelled to access an auditable item stream contract."
        }
    ],
    "paths": {
        "/info": {
            "get": {
                "operationId": "serverInformation",
                "summary": "Get the information for the server",
                "tags": [
                    "Info"
                ],
                "responses": {
                    "200": {
                        "description": "The information about the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerInfo"
                                },
                                "examples": {
                                    "informationResponse": {
                                        "summary": "The response for the information request.",
                                        "value": {
                                            "name": "API Server",
                                            "version": "1.0.0"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "operationId": "serverHealth",
                "summary": "Get the health for the server",
                "tags": [
                    "Info"
                ],
                "responses": {
                    "200": {
                        "description": "The health of the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthInfo"
                                },
                                "examples": {
                                    "healthResponseOK": {
                                        "summary": "The response for the health request.",
                                        "value": {
                                            "status": "ok",
                                            "components": [
                                                {
                                                    "name": "Database",
                                                    "status": "ok"
                                                },
                                                {
                                                    "name": "Storage",
                                                    "status": "ok"
                                                }
                                            ]
                                        }
                                    },
                                    "healthResponseWarning": {
                                        "summary": "The response for the health request with warnings.",
                                        "value": {
                                            "status": "warning",
                                            "components": [
                                                {
                                                    "name": "Database",
                                                    "status": "warning",
                                                    "details": "The database is running slow."
                                                },
                                                {
                                                    "name": "Storage",
                                                    "status": "ok"
                                                }
                                            ]
                                        }
                                    },
                                    "healthResponseError": {
                                        "summary": "The response for the health request with errors.",
                                        "value": {
                                            "status": "error",
                                            "components": [
                                                {
                                                    "name": "Database",
                                                    "status": "ok"
                                                },
                                                {
                                                    "name": "Storage",
                                                    "status": "error",
                                                    "details": "The storage is full."
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/spec": {
            "get": {
                "operationId": "serverSpec",
                "summary": "Get the OpenAPI specification for the endpoints",
                "tags": [
                    "Info"
                ],
                "responses": {
                    "200": {
                        "description": "The OpenAPI spec for the endpoints.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerSpecResponse"
                                },
                                "examples": {
                                    "specResponse": {
                                        "summary": "The response for the spec request.",
                                        "value": {
                                            "openapi": "3.1.0",
                                            "info": {},
                                            "paths": {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/authentication/login": {
            "post": {
                "operationId": "authenticationLogin",
                "summary": "Login to the server",
                "tags": [
                    "Authentication"
                ],
                "requestBody": {
                    "description": "Perform a login on the server.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            },
                            "examples": {
                                "loginRequestExample": {
                                    "summary": "The request to login to the server.",
                                    "value": {
                                        "email": "user@example.com",
                                        "password": "MyPassword123!"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Response from a login on the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponse"
                                },
                                "examples": {
                                    "loginResponseExample": {
                                        "summary": "The response for the login request.",
                                        "value": {
                                            "token": "eyJhbGciOiJIU...sw5c",
                                            "expiry": 1722514341067
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/authentication/logout": {
            "get": {
                "operationId": "authenticationLogout",
                "summary": "Logout from the server",
                "tags": [
                    "Authentication"
                ],
                "parameters": [
                    {
                        "name": "token",
                        "description": "The token to logout, if it uses a mechanism with public access.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "eyJhbGciOiJIU...sw5c"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/authentication/refresh": {
            "get": {
                "operationId": "authenticationRefreshToken",
                "summary": "Refresh an authentication token",
                "tags": [
                    "Authentication"
                ],
                "parameters": [
                    {
                        "name": "token",
                        "description": "The token to refresh, if it uses a mechanism with public access.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "eyJhbGciOiJIU...sw5c"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response from a refresh on the auth token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RefreshTokenResponse"
                                },
                                "examples": {
                                    "refreshTokenResponseExample": {
                                        "summary": "The response for the refresh token request.",
                                        "value": {
                                            "token": "eyJhbGciOiJIU...sw5c",
                                            "expiry": 1722514341067
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/identity/{id}": {
            "get": {
                "operationId": "identityResolve",
                "summary": "Resolve an identity",
                "tags": [
                    "Identity"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The identity to get the document for.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to resolving an identity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DidDocument"
                                },
                                "examples": {
                                    "identityResolveResponseExample": {
                                        "value": {
                                            "id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a",
                                            "service": [
                                                {
                                                    "id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a#revocation",
                                                    "type": "RevocationBitmap2022",
                                                    "serviceEndpoint": "data:application/octet-stream;base64,eJyzMmAAAwABr"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/identity/profile": {
            "post": {
                "operationId": "identityProfileCreate",
                "summary": "Create an identity profile",
                "tags": [
                    "Identity Profile"
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Request to create an identity profile.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentityProfileCreateRequest"
                            },
                            "examples": {
                                "identityProfileCreateRequestExample": {
                                    "value": {
                                        "publicProfile": {
                                            "@context": "http://schema.org/",
                                            "@type": "Person",
                                            "jobTitle": "Professor",
                                            "name": "Jane Doe"
                                        },
                                        "privateProfile": {
                                            "@context": "http://schema.org/",
                                            "@type": "Person",
                                            "telephone": "(425) 123-4567",
                                            "url": "http://www.janedoe.com"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "The request resulted in a conflicting operation, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "ConflictError",
                                            "message": "component.error",
                                            "properties": {
                                                "conflicts": [
                                                    "1"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "identityProfileGet",
                "summary": "Get the identity profile properties",
                "tags": [
                    "Identity Profile"
                ],
                "parameters": [
                    {
                        "name": "publicPropertyNames",
                        "description": "The public properties to get for the profile, defaults to all, should be a comma separated list.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "name,jobTitle"
                    },
                    {
                        "name": "privatePropertyNames",
                        "description": "The private properties to get for the profile, defaults to all, should be a comma separated list.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to get an identity details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdentityProfileGetResponse"
                                },
                                "examples": {
                                    "identityGetResponseExample": {
                                        "value": {
                                            "identity": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
                                            "publicProfile": {
                                                "@context": "http://schema.org/",
                                                "@type": "Person",
                                                "jobTitle": "Professor",
                                                "name": "Jane Doe"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "identityProfileUpdate",
                "summary": "Update an identity profile properties",
                "tags": [
                    "Identity Profile"
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Request to update an identity profile.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentityProfileUpdateRequest"
                            },
                            "examples": {
                                "identityProfileUpdateRequestExample": {
                                    "value": {
                                        "publicProfile": {
                                            "@context": "http://schema.org/",
                                            "@type": "Person",
                                            "jobTitle": "Professor",
                                            "name": "Jane Doe"
                                        },
                                        "privateProfile": {
                                            "@context": "http://schema.org/",
                                            "@type": "Person",
                                            "telephone": "(425) 123-4567",
                                            "url": "http://www.janedoe.com"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "identityProfileRemove",
                "summary": "Remove an identity profile",
                "tags": [
                    "Identity Profile"
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/identity/profile/{identity}/public": {
            "get": {
                "operationId": "identityProfileGetPublic",
                "summary": "Get the identity profile public properties",
                "tags": [
                    "Identity Profile"
                ],
                "parameters": [
                    {
                        "name": "identity",
                        "description": "The identity to get the profile for.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
                    },
                    {
                        "name": "propertyNames",
                        "description": "The properties to get for the public profile, defaults to all, should be a comma separated list.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "role,email,name"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to get an identity public profile.",
                        "content": {
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
                                },
                                "examples": {
                                    "identityGetPublicResponseExample": {
                                        "value": {
                                            "@context": "http://schema.org/",
                                            "@type": "Person",
                                            "jobTitle": "Professor",
                                            "name": "Jane Doe"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "content-type": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. application/ld+json"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/identity/profile/query": {
            "get": {
                "operationId": "identitiesProfileList",
                "summary": "Get the list of profile data for identities",
                "tags": [
                    "Identity Profile"
                ],
                "parameters": [
                    {
                        "name": "publicFilters",
                        "description": "The public filters to apply to the list, comma separated list with color between key and value for each pair e.g. prop1:value1,prop2:value2.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "publicPropertyNames",
                        "description": "The public properties to get for the profile, defaults to all, should be a comma separated list.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "The cursor for paged requests.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to get a list of identities.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdentityProfileListResponse"
                                },
                                "examples": {
                                    "identitiesProfileListResponseExample": {
                                        "value": {
                                            "items": [
                                                {
                                                    "identity": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
                                                    "publicProfile": {
                                                        "@context": "http://schema.org/",
                                                        "@type": "Person",
                                                        "jobTitle": "Professor",
                                                        "name": "Jane Doe"
                                                    }
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/blob-storage": {
            "post": {
                "operationId": "blobStorageCreate",
                "summary": "Create an entry in blob storage",
                "tags": [
                    "Blob Storage"
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Request to create an entry in blob storage.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlobStorageCreateRequest"
                            },
                            "examples": {
                                "blobStorageCreateRequestExample": {
                                    "value": {
                                        "blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw==",
                                        "metadata": {
                                            "@context": "http://schema.org/",
                                            "@type": "DigitalDocument",
                                            "name": "myfile.pdf"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The rest request ended in created response.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "blobStorageGet",
                "summary": "Query the items from blob storage",
                "tags": [
                    "Blob Storage"
                ],
                "parameters": [
                    {
                        "name": "conditions",
                        "description": "The condition for the query as JSON version of EntityCondition type.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "description": "The order for the results, default to created.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "dateCreated",
                                "dateModified"
                            ]
                        }
                    },
                    {
                        "name": "orderByDirection",
                        "description": "The direction for the order, defaults to desc.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SortDirection"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "The number of entries to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "The cursor to get next chunk of data, returned in previous response.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to getting the list of entries from a query.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlobStorageEntryList"
                                },
                                "examples": {
                                    "blobStorageListResponseExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/blob-storage/"
                                            ],
                                            "type": "BlobStorageEntryList",
                                            "entries": [
                                                {
                                                    "@context": [
                                                        "https://schema.twindev.org/blob-storage/",
                                                        "https://schema.org/"
                                                    ],
                                                    "type": "BlobStorageEntry",
                                                    "id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
                                                    "dateCreated": "2024-01-01T00:00:00Z",
                                                    "encodingFormat": "application/pdf",
                                                    "blobSize": 42,
                                                    "fileExtension": "pdf",
                                                    "metadata": {
                                                        "@context": "http://schema.org/",
                                                        "@type": "DigitalDocument",
                                                        "name": "myfile.pdf"
                                                    },
                                                    "blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlobStorageEntryList"
                                },
                                "examples": {
                                    "blobStorageListResponseJsonLdExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/blob-storage/"
                                            ],
                                            "type": "BlobStorageEntryList",
                                            "entries": [
                                                {
                                                    "@context": [
                                                        "https://schema.twindev.org/blob-storage/",
                                                        "https://schema.org/"
                                                    ],
                                                    "type": "BlobStorageEntry",
                                                    "id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
                                                    "dateCreated": "2024-01-01T00:00:00Z",
                                                    "encodingFormat": "application/pdf",
                                                    "blobSize": 42,
                                                    "fileExtension": "pdf",
                                                    "metadata": {
                                                        "@context": "http://schema.org/",
                                                        "@type": "DigitalDocument",
                                                        "name": "myfile.pdf"
                                                    },
                                                    "blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/blob-storage/{id}": {
            "get": {
                "operationId": "blobStorageGet",
                "summary": "Get the metadata for an item from blob storage",
                "tags": [
                    "Blob Storage"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the blob to get in urn format.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
                    },
                    {
                        "name": "includeContent",
                        "description": "Include the content in the response, otherwise only metadata is returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to get an entry from blob storage.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlobStorageEntry"
                                },
                                "examples": {
                                    "blobStorageGetResponseExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/blob-storage/",
                                                "https://schema.org/"
                                            ],
                                            "type": "BlobStorageEntry",
                                            "id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
                                            "dateCreated": "2024-01-01T00:00:00Z",
                                            "encodingFormat": "application/pdf",
                                            "blobSize": 42,
                                            "fileExtension": "pdf",
                                            "metadata": {
                                                "@context": "http://schema.org/",
                                                "@type": "DigitalDocument",
                                                "name": "myfile.pdf"
                                            },
                                            "blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
                                        }
                                    }
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlobStorageEntry"
                                },
                                "examples": {
                                    "blobStorageGetResponseJsonLdExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/blob-storage/",
                                                "https://schema.org/"
                                            ],
                                            "type": "BlobStorageEntry",
                                            "id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
                                            "dateCreated": "2024-01-01T00:00:00Z",
                                            "encodingFormat": "application/pdf",
                                            "blobSize": 42,
                                            "fileExtension": "pdf",
                                            "metadata": {
                                                "@context": "http://schema.org/",
                                                "@type": "DigitalDocument",
                                                "name": "myfile.pdf"
                                            },
                                            "blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "blobStorageUpdate",
                "summary": "Update the metadata for an item in blob storage",
                "tags": [
                    "Blob Storage"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the blob to get in urn format.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Request to update a blob entry.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlobStorageUpdateRequest"
                            },
                            "examples": {
                                "blobStorageUpdateRequestExample": {
                                    "value": {
                                        "metadata": {
                                            "@context": "http://schema.org/",
                                            "@type": "DigitalDocument",
                                            "name": "myfile.pdf"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "blobStorageRemove",
                "summary": "Remove an item from blob storage",
                "tags": [
                    "Blob Storage"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the blob to remove in urn format.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/blob-storage/{id}/content": {
            "get": {
                "operationId": "blobStorageGetContent",
                "summary": "Get the content for an item in blob storage",
                "tags": [
                    "Blob Storage"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The content of the blob, which will be a specific mime type if one can be detected from the content (or set as encodingFormat in the entry), or defaults to application/octet-stream.",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                },
                                "examples": {
                                    "blobStorageGetContentResponseExample": {
                                        "summary": "Binary Data",
                                        "value": ""
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/telemetry/metric": {
            "post": {
                "operationId": "telemetryCreateMetric",
                "summary": "Create a telemetry metric",
                "tags": [
                    "Telemetry"
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Create a new telemetry metric.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TelemetryMetric"
                            },
                            "examples": {
                                "telemetryCreateMetricRequestExample": {
                                    "value": {
                                        "id": "my-counter",
                                        "label": "My Counter",
                                        "description": "This is my counter",
                                        "type": 0,
                                        "unit": "KG"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The rest request ended in created response.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. my-counter"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "telemetryListEntries",
                "summary": "Get a list of the telemetry metrics",
                "tags": [
                    "Telemetry"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "description": "The type of the metric.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/MetricType"
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "The optional cursor to get next chunk.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "The maximum number of entities in a page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response for telemetry list request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TelemetryListResponse"
                                },
                                "examples": {
                                    "telemetryListResponseExample": {
                                        "value": {
                                            "entities": [
                                                {
                                                    "id": "my-counter",
                                                    "label": "My Counter",
                                                    "type": 0,
                                                    "unit": "KG"
                                                },
                                                {
                                                    "id": "my-counter-2",
                                                    "label": "My Counter 2",
                                                    "type": 1,
                                                    "unit": "M"
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/telemetry/metric/{id}": {
            "get": {
                "operationId": "telemetryGetMetric",
                "summary": "Get a telemetry metric and it's most recent value",
                "tags": [
                    "Telemetry"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the metric.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "my-counter"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a telemetry metric response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TelemetryGetMetricResponse"
                                },
                                "examples": {
                                    "telemetryGetMetricResponseExample": {
                                        "value": {
                                            "metric": {
                                                "id": "my-counter",
                                                "label": "My Counter",
                                                "description": "This is my counter",
                                                "type": 0,
                                                "unit": "KG"
                                            },
                                            "value": {
                                                "id": "aabbccdd11223445566",
                                                "ts": 1715252922273,
                                                "value": 10
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "telemetryUpdateMetric",
                "summary": "Update a telemetry metric",
                "tags": [
                    "Telemetry"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the metric.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "my-counter"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Update a telemetry metric.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TelemetryUpdateMetricRequest"
                            },
                            "examples": {
                                "telemetryUpdateMetricRequestExample": {
                                    "value": {
                                        "label": "My New Label"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "telemetryRemoveMetric",
                "summary": "Remove a telemetry metric and it's values.",
                "tags": [
                    "Telemetry"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the metric.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "my-counter"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/telemetry/metric/{id}/value": {
            "post": {
                "operationId": "telemetryAddMetricValue",
                "summary": "Add a telemetry metric value",
                "tags": [
                    "Telemetry"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the metric.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "my-counter"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Add a telemetry metric value.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TelemetryAddMetricValueRequest"
                            },
                            "examples": {
                                "telemetryAddMetricValueRequestExample": {
                                    "value": {
                                        "value": 10
                                    }
                                },
                                "telemetryAddMetricValueIncRequestExample": {
                                    "value": {
                                        "value": "inc"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The rest request ended in created response.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. aabbccdd11223445566"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "telemetryValuesListEntries",
                "summary": "Get a list of the values for a telemetry metric",
                "tags": [
                    "Telemetry"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the metric.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "my-counter"
                    },
                    {
                        "name": "timeStart",
                        "description": "The start time of the metrics to retrieve as a timestamp in ms.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "timeEnd",
                        "description": "The end time of the metrics to retrieve as a timestamp in ms.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "The optional cursor to get next chunk.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "The maximum number of entities in a page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response for telemetry list request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TelemetryValuesListResponse"
                                },
                                "examples": {
                                    "telemetryValuesListResponseExample": {
                                        "value": {
                                            "metric": {
                                                "id": "my-counter",
                                                "label": "My Counter",
                                                "type": 0,
                                                "unit": "KG"
                                            },
                                            "entities": [
                                                {
                                                    "id": "aabbccdd11223445566",
                                                    "ts": 1715252922273,
                                                    "value": 10
                                                },
                                                {
                                                    "id": "aabbccdd11223445566",
                                                    "ts": 1715252922274,
                                                    "value": 11
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logging": {
            "post": {
                "operationId": "loggingEntryCreate",
                "summary": "Create a log entry",
                "tags": [
                    "Logging"
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Create a new log entry.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LogEntry"
                            },
                            "examples": {
                                "loggingEntryCreateInfoExample": {
                                    "value": {
                                        "level": "info",
                                        "message": "This is an information message",
                                        "source": "source",
                                        "ts": 1715252922273
                                    }
                                },
                                "loggingEntryCreateErrorExample": {
                                    "value": {
                                        "level": "info",
                                        "message": "This is an error message",
                                        "source": "source",
                                        "ts": 1715252922273,
                                        "error": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "loggingListEntries",
                "summary": "Get a list of the log entries",
                "tags": [
                    "Logging"
                ],
                "parameters": [
                    {
                        "name": "level",
                        "description": "The level of the log entries to retrieve.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/LogLevel"
                        },
                        "example": "info"
                    },
                    {
                        "name": "source",
                        "description": "The source of the log entries to retrieve.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "timeStart",
                        "description": "The start time of the metrics to retrieve as a timestamp in ms.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "timeEnd",
                        "description": "The end time of the metrics to retrieve as a timestamp in ms.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "The optional cursor to get next chunk.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "The maximum number of entities in a page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response for log entry list request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoggingListResponse"
                                },
                                "examples": {
                                    "listResponseExample": {
                                        "value": {
                                            "entities": [
                                                {
                                                    "level": "info",
                                                    "message": "This is an information message",
                                                    "source": "source",
                                                    "ts": 1715252922273
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nft": {
            "post": {
                "operationId": "nftMint",
                "summary": "Mint an NFT",
                "tags": [
                    "NFT"
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Mint the data and return the NFT id.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NftMintRequest"
                            },
                            "examples": {
                                "nftMintExample": {
                                    "value": {
                                        "issuer": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv",
                                        "tag": "MY-NFT",
                                        "immutableMetadata": {
                                            "docName": "bill-of-lading",
                                            "mimeType": "application/pdf",
                                            "fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
                                        },
                                        "metadata": {
                                            "data": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The rest request ended in created response.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nft/{id}": {
            "get": {
                "operationId": "nftResolve",
                "summary": "Resolve an NFT",
                "tags": [
                    "NFT"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the NFT to resolve.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to resolving the NFT.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NftResolveResponse"
                                },
                                "examples": {
                                    "nftResolveResponseExample": {
                                        "value": {
                                            "issuer": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv",
                                            "owner": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv",
                                            "tag": "MY-NFT",
                                            "immutableMetadata": {
                                                "docName": "bill-of-lading",
                                                "mimeType": "application/pdf",
                                                "fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
                                            },
                                            "metadata": {
                                                "data": "AAAAA"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "nftBurn",
                "summary": "Burn an NFT",
                "tags": [
                    "NFT"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the NFT to burn.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "nftUpdate",
                "summary": "Update an NFT",
                "tags": [
                    "NFT"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the NFT to transfer in urn format.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Update the mutable data for the NFT.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NftUpdateRequest"
                            },
                            "examples": {
                                "nftUpdateExample": {
                                    "value": {
                                        "metadata": {
                                            "data": "AAAAA"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nft/{id}/transfer": {
            "post": {
                "operationId": "nftTransfer",
                "summary": "Transfer an NFT",
                "tags": [
                    "NFT"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the NFT to transfer in urn format.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Transfer the NFT and update the metadata.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NftTransferRequest"
                            },
                            "examples": {
                                "nftTransferExample": {
                                    "value": {
                                        "recipient": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv",
                                        "metadata": {
                                            "data": "AAAAA"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/attestation": {
            "post": {
                "operationId": "attestationCreate",
                "summary": "Attest a JSON-LD object",
                "tags": [
                    "Attestation"
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Attest the data and return the id of the attestation.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AttestationCreateRequest"
                            },
                            "examples": {
                                "attestationCreateRequestExample": {
                                    "value": {
                                        "verificationMethodId": "did:iota:tst:0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f#attestation",
                                        "attestationObject": {
                                            "@context": "https://schema.org",
                                            "type": "DigitalDocument",
                                            "name": "bill-of-lading",
                                            "mimeType": "application/pdf",
                                            "fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The rest request ended in created response.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/attestation/{id}": {
            "get": {
                "operationId": "attestationGet",
                "summary": "Get an attestation",
                "tags": [
                    "Attestation"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The attestation id to verify.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response to verifying the attestation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttestationInformation"
                                },
                                "examples": {
                                    "attestationGetResponseExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/attestation/",
                                                "https://schema.org/"
                                            ],
                                            "type": "Information",
                                            "id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
                                            "dateCreated": "2024-06-18T13:34:51Z",
                                            "ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
                                            "holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
                                            "attestationObject": {
                                                "@context": "https://schema.org",
                                                "type": "DigitalDocument",
                                                "name": "bill-of-lading",
                                                "mimeType": "application/pdf",
                                                "fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
                                            },
                                            "proof": {
                                                "type": "JwtProof",
                                                "value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
                                            },
                                            "verified": true
                                        }
                                    },
                                    "attestationVerifyResponseFailExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/attestation/",
                                                "https://schema.org/"
                                            ],
                                            "type": "Information",
                                            "id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
                                            "dateCreated": "2024-06-18T13:34:51Z",
                                            "ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
                                            "holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
                                            "attestationObject": {
                                                "@context": "https://schema.org",
                                                "type": "DigitalDocument",
                                                "name": "bill-of-lading",
                                                "mimeType": "application/pdf",
                                                "fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
                                            },
                                            "proof": {
                                                "type": "JwtProof",
                                                "value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
                                            },
                                            "verified": false,
                                            "verificationFailure": "proofFailed"
                                        }
                                    }
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttestationInformation"
                                },
                                "examples": {
                                    "attestationGetResponseExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/attestation/",
                                                "https://schema.org/"
                                            ],
                                            "type": "Information",
                                            "id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
                                            "dateCreated": "2024-06-18T13:34:51Z",
                                            "ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
                                            "holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
                                            "attestationObject": {
                                                "@context": "https://schema.org",
                                                "type": "DigitalDocument",
                                                "name": "bill-of-lading",
                                                "mimeType": "application/pdf",
                                                "fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
                                            },
                                            "proof": {
                                                "type": "JwtProof",
                                                "value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
                                            },
                                            "verified": true
                                        }
                                    },
                                    "attestationVerifyResponseFailExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/attestation/",
                                                "https://schema.org/"
                                            ],
                                            "type": "Information",
                                            "id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
                                            "dateCreated": "2024-06-18T13:34:51Z",
                                            "ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
                                            "holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
                                            "attestationObject": {
                                                "@context": "https://schema.org",
                                                "type": "DigitalDocument",
                                                "name": "bill-of-lading",
                                                "mimeType": "application/pdf",
                                                "fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
                                            },
                                            "proof": {
                                                "type": "JwtProof",
                                                "value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
                                            },
                                            "verified": false,
                                            "verificationFailure": "proofFailed"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "attestationDestroy",
                "summary": "Destroy an attestation",
                "tags": [
                    "Attestation"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The attestation id to destroy.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/attestation/{id}/transfer": {
            "put": {
                "operationId": "attestationTransfer",
                "summary": "Transfer an attestation",
                "tags": [
                    "Attestation"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The attestation id to verify.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Transfer the attestation to a new holder.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AttestationTransferRequest"
                            },
                            "examples": {
                                "attestationTransferRequestExample": {
                                    "value": {
                                        "holderIdentity": "did:iota:tst:0x06ae1034f9f4af1b408a0b54e877bb476259666a14f221400d3746aecefa7105"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/aig": {
            "post": {
                "operationId": "auditableItemGraphCreate",
                "summary": "Create a new graph vertex",
                "tags": [
                    "Auditable Item Graph"
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Create an auditable item graph vertex.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuditableItemGraphCreateRequest"
                            },
                            "examples": {
                                "auditableItemGraphCreateRequestExample": {
                                    "value": {
                                        "vertexObject": {
                                            "@context": "http://schema.org/",
                                            "@type": "Note",
                                            "content": "This is a simple note"
                                        },
                                        "aliases": [
                                            {
                                                "id": "bar456",
                                                "aliasObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            },
                                            {
                                                "id": "foo321",
                                                "aliasObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            }
                                        ],
                                        "resources": [
                                            {
                                                "id": "resource1",
                                                "resourceObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            },
                                            {
                                                "id": "resource2",
                                                "resourceObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            }
                                        ],
                                        "edges": [
                                            {
                                                "id": "edge1",
                                                "edgeRelationship": "frenemy",
                                                "edgeObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            },
                                            {
                                                "id": "edge2",
                                                "edgeRelationship": "end",
                                                "edgeObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The rest request ended in created response.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. aig:1234567890"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "auditableItemGraphList",
                "summary": "Query graph vertices by id or alias",
                "tags": [
                    "Auditable Item Graph"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id or alias to try and find.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "idMode",
                        "description": "Which field to look in with the id, defaults to both.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "alias",
                                "both"
                            ]
                        }
                    },
                    {
                        "name": "orderBy",
                        "description": "The order for the results, default to dateCreated.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "dateCreated",
                                "dateModified"
                            ]
                        }
                    },
                    {
                        "name": "orderByDirection",
                        "description": "The direction for the order, defaults to desc.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SortDirection"
                        }
                    },
                    {
                        "name": "properties",
                        "description": "The properties to return as a comma separated list, defaults to \"id,dateCreated,aliases,vertexObject\".",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "The optional cursor to get next chunk.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "The maximum number of entities in a page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response to getting the a list of the vertices with matching ids or aliases.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertexList"
                                },
                                "examples": {
                                    "auditableItemGraphListResponseExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/aig/",
                                                "https://schema.org/"
                                            ],
                                            "type": "AuditableItemGraphVertexList",
                                            "vertices": [
                                                {
                                                    "@context": [
                                                        "https://schema.twindev.org/aig/",
                                                        "https://schema.org/"
                                                    ],
                                                    "type": "AuditableItemGraphVertex",
                                                    "id": "0101010101010101010101010101010101010101010101010101010101010101",
                                                    "dateCreated": "2024-08-22T11:55:16.271Z",
                                                    "aliases": [
                                                        {
                                                            "@context": [
                                                                "https://schema.twindev.org/aig/",
                                                                "https://schema.org/"
                                                            ],
                                                            "type": "AuditableItemGraphAlias",
                                                            "id": "foo4",
                                                            "dateCreated": "2024-08-22T11:55:16.271Z"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertexList"
                                },
                                "examples": {
                                    "auditableItemGraphJsonLdListResponseExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/aig/",
                                                "https://schema.org/"
                                            ],
                                            "type": "AuditableItemGraphVertexList",
                                            "vertices": [
                                                {
                                                    "@context": [
                                                        "https://schema.twindev.org/aig/",
                                                        "https://schema.org/"
                                                    ],
                                                    "type": "AuditableItemGraphVertex",
                                                    "id": "0101010101010101010101010101010101010101010101010101010101010101",
                                                    "dateCreated": "2024-08-22T11:55:16.271Z",
                                                    "aliases": [
                                                        {
                                                            "@context": [
                                                                "https://schema.twindev.org/aig/",
                                                                "https://schema.org/"
                                                            ],
                                                            "type": "AuditableItemGraphAlias",
                                                            "id": "foo4",
                                                            "dateCreated": "2024-08-22T11:55:16.271Z"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "content-type": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. application/ld+json"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/aig/{id}": {
            "get": {
                "operationId": "auditableItemGraphGet",
                "summary": "Get a graph vertex",
                "tags": [
                    "Auditable Item Graph"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the vertex to get.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "aig:1234567890"
                    },
                    {
                        "name": "includeDeleted",
                        "description": "Whether to include deleted aliases, resource, edges, defaults to false.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeChangesets",
                        "description": "Whether to include the changesets of the vertex, defaults to false.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "verifySignatureDepth",
                        "description": "How many signatures to verify, none, current or all, defaults to \"none\".",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/VerifyDepth"
                        }
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "application/json"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to getting an auditable item graph vertex.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertex"
                                },
                                "examples": {
                                    "auditableItemGraphGetResponseExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/aig/",
                                                "https://schema.org/"
                                            ],
                                            "type": "AuditableItemGraphVertex",
                                            "id": "aig:1234567890",
                                            "dateCreated": "2024-08-22T11:55:16.271Z",
                                            "dateModified": "2024-08-22T11:55:16.271Z",
                                            "vertexObject": {
                                                "@context": "http://schema.org/",
                                                "@type": "Note",
                                                "content": "This is a simple note"
                                            },
                                            "aliases": [
                                                {
                                                    "@context": [
                                                        "https://schema.twindev.org/aig/",
                                                        "https://schema.org/"
                                                    ],
                                                    "type": "AuditableItemGraphAlias",
                                                    "id": "tst:1234567890",
                                                    "dateCreated": "2024-08-22T11:55:16.271Z"
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertex"
                                },
                                "examples": {
                                    "auditableItemGraphJsonLdGetResponseExample": {
                                        "value": {
                                            "@context": [
                                                "https://schema.twindev.org/aig/",
                                                "https://schema.org/"
                                            ],
                                            "type": "AuditableItemGraphVertex",
                                            "id": "aig:1234567890",
                                            "dateCreated": "2024-08-22T11:55:16.271Z",
                                            "dateModified": "2024-08-22T11:55:16.271Z",
                                            "vertexObject": {
                                                "@context": "http://schema.org/",
                                                "@type": "Note",
                                                "content": "This is a simple note"
                                            },
                                            "aliases": [
                                                {
                                                    "@context": [
                                                        "https://schema.twindev.org/aig/",
                                                        "https://schema.org/"
                                                    ],
                                                    "type": "AuditableItemGraphAlias",
                                                    "dateCreated": "2024-08-22T11:55:16.271Z",
                                                    "id": "tst:1234567890"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "content-type": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. application/ld+json"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "auditableItemGraphUpdate",
                "summary": "Update a graph vertex",
                "tags": [
                    "Auditable Item Graph"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the vertex to update.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "aig:1234567890"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Update an auditable item graph vertex.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuditableItemGraphUpdateRequest"
                            },
                            "examples": {
                                "auditableItemGraphUpdateRequestExample": {
                                    "value": {
                                        "vertexObject": {
                                            "@context": "http://schema.org/",
                                            "@type": "Note",
                                            "content": "This is a simple note"
                                        },
                                        "aliases": [
                                            {
                                                "id": "bar456",
                                                "aliasObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            },
                                            {
                                                "id": "foo321",
                                                "aliasObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            }
                                        ],
                                        "resources": [
                                            {
                                                "id": "resource1",
                                                "resourceObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            },
                                            {
                                                "id": "resource2",
                                                "resourceObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            }
                                        ],
                                        "edges": [
                                            {
                                                "id": "edge1",
                                                "edgeRelationship": "frenemy",
                                                "edgeObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            },
                                            {
                                                "id": "edge2",
                                                "edgeRelationship": "end",
                                                "edgeObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Note",
                                                    "content": "This is a simple note"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ais": {
            "post": {
                "operationId": "auditableItemStreamCreate",
                "summary": "Create a new stream",
                "tags": [
                    "Auditable Item Stream"
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Create an auditable item stream.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuditableItemStreamCreateRequest"
                            },
                            "examples": {
                                "auditableItemStreamCreateRequestExample": {
                                    "value": {
                                        "streamObject": {
                                            "@context": "http://schema.org/",
                                            "@type": "Note",
                                            "content": "This is a simple note"
                                        },
                                        "entries": [
                                            {
                                                "entryObject": {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Event",
                                                    "startDate": "2011-04-09T20:00:00Z",
                                                    "description": "A description of the event"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The rest request ended in created response.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. ais:1234567890"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "auditableItemStreamList",
                "summary": "Query streams",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "conditions",
                        "description": "The conditions to filter the streams, consist of property|comparison|value comma separated.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "description": "The order for the results, default to created.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "dateCreated",
                                "dateModified"
                            ]
                        }
                    },
                    {
                        "name": "orderByDirection",
                        "description": "The direction for the order, defaults to desc.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SortDirection"
                        }
                    },
                    {
                        "name": "properties",
                        "description": "The properties to return as a comma separated list, defaults to \"id,object\".",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "The optional cursor to get next chunk.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "The maximum number of entities in a page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response to getting the a list of the streams.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/ais/AuditableItemStreamList"
                                },
                                "examples": {
                                    "auditableItemStreamListResponseExample": {
                                        "value": {
                                            "@context": "https://schema.twindev.org/ais/",
                                            "type": "AuditableItemStreamList",
                                            "streams": [
                                                {
                                                    "@context": "https://schema.twindev.org/ais/",
                                                    "type": "AuditableItemStream",
                                                    "id": "ais:1234567890",
                                                    "dateCreated": "2024-08-22T11:55:16.271Z",
                                                    "dateModified": "2024-08-22T11:55:16.271Z",
                                                    "streamObject": {
                                                        "@context": "http://schema.org/",
                                                        "@type": "Note",
                                                        "content": "This is a simple note"
                                                    },
                                                    "nodeIdentity": "tst:1234567890",
                                                    "userIdentity": "tst:1234567890",
                                                    "proofId": "0101010101010101010101010101010101010101010101010101010101010101",
                                                    "immutableInterval": 10
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/ais/AuditableItemStreamList"
                                },
                                "examples": {
                                    "auditableItemStreamJsonLdListResponseExample": {
                                        "value": {
                                            "@context": "https://schema.twindev.org/ais/",
                                            "type": "AuditableItemStreamList",
                                            "streams": [
                                                {
                                                    "@context": "https://schema.twindev.org/ais/",
                                                    "type": "AuditableItemStream",
                                                    "id": "ais:1234567890",
                                                    "dateCreated": "2024-08-22T11:55:16.271Z",
                                                    "dateModified": "2024-08-22T11:55:16.271Z",
                                                    "streamObject": {
                                                        "@context": "http://schema.org/",
                                                        "@type": "Note",
                                                        "content": "This is a simple note"
                                                    },
                                                    "nodeIdentity": "tst:1234567890",
                                                    "userIdentity": "tst:1234567890",
                                                    "proofId": "0101010101010101010101010101010101010101010101010101010101010101",
                                                    "immutableInterval": 10
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "content-type": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. application/ld+json"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ais/{id}": {
            "get": {
                "operationId": "auditableItemStreamGet",
                "summary": "Get a stream",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the stream to get.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890"
                    },
                    {
                        "name": "includeEntries",
                        "description": "Whether to include the entries, defaults to false. The entries will be limited to the first page of entries in date descending order. If you want to get more entries you can use the returned cursor with the get entries method.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeDeleted",
                        "description": "Whether to include deleted entries, defaults to false.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "verifyStream",
                        "description": "Should the stream be verified, defaults to false.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "verifyEntries",
                        "description": "Should the entries be verified, defaults to false.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "application/json"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to getting an auditable item stream.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/ais/AuditableItemStream"
                                },
                                "examples": {
                                    "auditableItemStreamGetResponseExample": {
                                        "value": {
                                            "@context": "https://schema.twindev.org/ais/",
                                            "type": "AuditableItemStream",
                                            "id": "ais:1234567890",
                                            "dateCreated": "2024-08-22T11:55:16.271Z",
                                            "dateModified": "2024-08-22T11:55:16.271Z",
                                            "streamObject": {
                                                "@context": "http://schema.org/",
                                                "@type": "Note",
                                                "content": "This is a simple note"
                                            },
                                            "nodeIdentity": "tst:1234567890",
                                            "userIdentity": "tst:1234567890",
                                            "proofId": "0101010101010101010101010101010101010101010101010101010101010101",
                                            "immutableInterval": 10,
                                            "entries": [
                                                {
                                                    "@context": "https://schema.twindev.org/ais/",
                                                    "type": "AuditableItemStreamEntry",
                                                    "id": "tst:1234567890",
                                                    "dateCreated": "2024-08-22T11:55:16.271Z",
                                                    "proofId": "0101010101010101010101010101010101010101010101010101010101010101",
                                                    "index": 0,
                                                    "entryObject": {
                                                        "@context": "http://schema.org/",
                                                        "@type": "Event",
                                                        "startDate": "2011-04-09T20:00:00Z",
                                                        "description": "A description of the event"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/ais/AuditableItemStream"
                                },
                                "examples": {
                                    "auditableItemStreamJsonLdGetResponseExample": {
                                        "value": {
                                            "@context": "https://schema.twindev.org/ais/",
                                            "type": "AuditableItemStream",
                                            "id": "ais:1234567890",
                                            "dateCreated": "2024-08-22T11:55:16.271Z",
                                            "dateModified": "2024-08-22T11:55:16.271Z",
                                            "streamObject": {
                                                "@context": "http://schema.org/",
                                                "@type": "Note",
                                                "content": "This is a simple note"
                                            },
                                            "nodeIdentity": "tst:1234567890",
                                            "userIdentity": "tst:1234567890",
                                            "proofId": "0101010101010101010101010101010101010101010101010101010101010101",
                                            "immutableInterval": 10,
                                            "entries": [
                                                {
                                                    "@context": "https://schema.twindev.org/ais/",
                                                    "type": "AuditableItemStreamEntry",
                                                    "id": "tst:1234567890",
                                                    "dateCreated": "2024-08-22T11:55:16.271Z",
                                                    "proofId": "0101010101010101010101010101010101010101010101010101010101010101",
                                                    "index": 0,
                                                    "entryObject": {
                                                        "@context": "http://schema.org/",
                                                        "@type": "Event",
                                                        "startDate": "2011-04-09T20:00:00Z",
                                                        "description": "A description of the event"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "content-type": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. application/ld+json"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "auditableItemStreamUpdate",
                "summary": "Update a stream",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the stream to update.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Update an auditable item stream.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuditableItemStreamUpdateRequest"
                            },
                            "examples": {
                                "auditableItemStreamUpdateRequestExample": {
                                    "value": {
                                        "streamObject": {
                                            "@context": "http://schema.org/",
                                            "@type": "Note",
                                            "content": "This is a simple note"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "auditableItemStreamDelete",
                "summary": "Delete a stream",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the stream to remove.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "operationId": "auditableItemStreamCreateEntry",
                "summary": "Create a new stream entry",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the stream to create the entry in.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Append to an auditable item stream.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuditableItemStreamCreateEntryRequest"
                            },
                            "examples": {
                                "auditableItemStreamCreateEntryRequestExample": {
                                    "value": {
                                        "entryObject": {
                                            "@context": "http://schema.org/",
                                            "@type": "Event",
                                            "startDate": "2011-04-09T20:00:00Z",
                                            "description": "A description of the event"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The rest request ended in created response.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. ais:1234567890:01010101010"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ais/{id}/{entryId}": {
            "get": {
                "operationId": "auditableItemStreamGetEntry",
                "summary": "Get a stream entry",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the stream to update the get in.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890"
                    },
                    {
                        "name": "entryId",
                        "description": "The id of the entry to update.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890:01010101010"
                    },
                    {
                        "name": "verifyEntry",
                        "description": "Verify the entry, defaults to false.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to getting an auditable item stream entry.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntry"
                                },
                                "examples": {
                                    "auditableItemStreamGetEntryResponseExample": {
                                        "value": {
                                            "@context": "https://schema.twindev.org/ais/",
                                            "type": "AuditableItemStreamEntry",
                                            "id": "tst:1234567890",
                                            "dateCreated": "2024-08-22T11:55:16.271Z",
                                            "proofId": "0101010101010101010101010101010101010101010101010101010101010101",
                                            "index": 0,
                                            "entryObject": {
                                                "@context": "http://schema.org/",
                                                "@type": "Event",
                                                "startDate": "2011-04-09T20:00:00Z",
                                                "description": "A description of the event"
                                            }
                                        }
                                    }
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntry"
                                },
                                "examples": {
                                    "auditableItemStreamJsonLdGetEntryResponseExample": {
                                        "value": {
                                            "@context": "https://schema.twindev.org/ais/",
                                            "type": "AuditableItemStreamEntry",
                                            "id": "tst:1234567890",
                                            "dateCreated": "2024-08-22T11:55:16.271Z",
                                            "proofId": "0101010101010101010101010101010101010101010101010101010101010101",
                                            "index": 0,
                                            "entryObject": {
                                                "@context": "http://schema.org/",
                                                "@type": "Event",
                                                "startDate": "2011-04-09T20:00:00Z",
                                                "description": "A description of the event"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "content-type": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. application/ld+json"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "auditableItemStreamDeleteEntry",
                "summary": "Delete an entry from the stream",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890"
                    },
                    {
                        "name": "entryId",
                        "description": "",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890:01010101010"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "auditableItemStreamUpdateEntry",
                "summary": "Update a stream entry",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the stream to update the entry in.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890"
                    },
                    {
                        "name": "entryId",
                        "description": "The id of the entry to update.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890:01010101010"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "requestBody": {
                    "description": "Update an entry in the auditable item stream.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuditableItemStreamUpdateEntryRequest"
                            },
                            "examples": {
                                "auditableItemStreamUpdateRequestExample": {
                                    "value": {
                                        "entryObject": {
                                            "@context": "http://schema.org/",
                                            "@type": "Note",
                                            "content": "This is a simple note"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The rest request ended in success with no data."
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ais/{id}/{entryId}/object": {
            "get": {
                "operationId": "auditableItemStreamGetEntryObject",
                "summary": "Get a stream entry",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890"
                    },
                    {
                        "name": "entryId",
                        "description": "",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890:01010101010"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to getting an auditable item stream entry object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                                },
                                "examples": {
                                    "auditableItemStreamGetEntryObjectResponseExample": {
                                        "value": {
                                            "@context": "http://schema.org/",
                                            "@type": "Event",
                                            "startDate": "2011-04-09T20:00:00Z",
                                            "description": "A description of the event"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ais/{id}/entries": {
            "get": {
                "operationId": "auditableItemStreamListEntries",
                "summary": "Get the entry objects in a stream",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the stream to get.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890"
                    },
                    {
                        "name": "conditions",
                        "description": "The conditions to filter the stream, consist of property|comparison|value comma separated.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeDeleted",
                        "description": "Whether to include deleted entries, defaults to false.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "verifyEntries",
                        "description": "Should the entries be verified, defaults to false.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "order",
                        "description": "Retrieve the entries in ascending/descending time order, defaults to Ascending.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SortDirection"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "How many entries to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "Cursor to use for next chunk of data.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to getting an auditable item stream entries.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntryList"
                                },
                                "examples": {
                                    "auditableItemStreamListEntriesResponseExample": {
                                        "value": {
                                            "@context": "https://schema.twindev.org/ais/",
                                            "type": "AuditableItemStreamEntryList",
                                            "entries": [
                                                {
                                                    "@context": "https://schema.twindev.org/ais/",
                                                    "type": "AuditableItemStreamEntry",
                                                    "id": "tst:1234567890",
                                                    "dateCreated": "2024-08-22T11:55:16.271Z",
                                                    "proofId": "0101010101010101010101010101010101010101010101010101010101010101",
                                                    "index": 0,
                                                    "entryObject": {
                                                        "@context": "http://schema.org/",
                                                        "@type": "Event",
                                                        "startDate": "2011-04-09T20:00:00Z",
                                                        "description": "A description of the event"
                                                    }
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntryList"
                                },
                                "examples": {
                                    "auditableItemStreamJsonLdListEntriesResponseExample": {
                                        "value": {
                                            "@context": "https://schema.twindev.org/ais/",
                                            "type": "AuditableItemStreamEntryList",
                                            "entries": [
                                                {
                                                    "@context": "https://schema.twindev.org/ais/",
                                                    "type": "AuditableItemStreamEntry",
                                                    "id": "tst:1234567890",
                                                    "dateCreated": "2024-08-22T11:55:16.271Z",
                                                    "proofId": "0101010101010101010101010101010101010101010101010101010101010101",
                                                    "index": 0,
                                                    "entryObject": {
                                                        "@context": "http://schema.org/",
                                                        "@type": "Event",
                                                        "startDate": "2011-04-09T20:00:00Z",
                                                        "description": "A description of the event"
                                                    }
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "content-type": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "e.g. application/ld+json"
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ais/{id}/entries/objects": {
            "get": {
                "operationId": "auditableItemStreamListEntryObjects",
                "summary": "Get the entry objects in a stream",
                "tags": [
                    "Auditable Item Stream"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the stream to get.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "example": "ais:1234567890"
                    },
                    {
                        "name": "conditions",
                        "description": "The conditions to filter the stream, consist of property|comparison|value comma separated.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeDeleted",
                        "description": "Whether to include deleted entries, defaults to false.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "order",
                        "description": "Retrieve the entries in ascending/descending time order, defaults to Ascending.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SortDirection"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "How many entries to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "Cursor to use for next chunk of data.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "security": [
                    {
                        "jwtBearerAuthScheme": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response to getting an auditable item stream entries objects.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntryObjectList"
                                },
                                "examples": {
                                    "auditableItemStreamListEntryObjectsResponseExample": {
                                        "value": {
                                            "@context": "https://schema.twindev.org/ais/",
                                            "type": "AuditableItemStreamEntryObjectList",
                                            "entryObjects": [
                                                {
                                                    "@context": "http://schema.org/",
                                                    "@type": "Event",
                                                    "startDate": "2011-04-09T20:00:00Z",
                                                    "description": "A description of the event"
                                                }
                                            ],
                                            "cursor": "1"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server cannot process the request, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "GeneralError",
                                            "message": "component.error",
                                            "properties": {
                                                "foo": "bar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "UnauthorizedError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource you tried to access does not exist, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "NotFoundError",
                                            "message": "component.error",
                                            "properties": {
                                                "notFoundId": "1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "exampleResponse": {
                                        "value": {
                                            "name": "InternalServerError",
                                            "message": "component.error"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ArrayBuffer": {
                "type": "object",
                "properties": {
                    "byteLength": {
                        "type": "number"
                    }
                },
                "required": [
                    "byteLength"
                ],
                "additionalProperties": false
            },
            "AttestationCreateRequest": {
                "type": "object",
                "properties": {
                    "verificationMethodId": {
                        "type": "string",
                        "description": "The identity verification method to use for attesting the data."
                    },
                    "attestationObject": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace of the connector to use for the attestation, defaults to component configured namespace."
                    }
                },
                "required": [
                    "verificationMethodId",
                    "attestationObject"
                ],
                "additionalProperties": false,
                "description": "The data to be used in the signing."
            },
            "AttestationInformation": {
                "type": "object",
                "properties": {
                    "@context": {
                        "anyOf": [
                            {
                                "type": "string",
                                "const": "https://schema.twindev.org/attestation/"
                            },
                            {
                                "type": "array",
                                "minItems": 1,
                                "items": [
                                    {
                                        "type": "string",
                                        "const": "https://schema.twindev.org/attestation/"
                                    }
                                ],
                                "additionalItems": {
                                    "type": "string"
                                }
                            }
                        ],
                        "description": "JSON-LD Context."
                    },
                    "type": {
                        "type": "string",
                        "const": "Information",
                        "description": "JSON-LD Type."
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the attestation."
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "Created date/time of the attestation in ISO format."
                    },
                    "dateTransferred": {
                        "type": "string",
                        "description": "Transferred date/time of the attestation in ISO format, can be blank if holder identity is owner."
                    },
                    "ownerIdentity": {
                        "type": "string",
                        "description": "The identity of the owner."
                    },
                    "holderIdentity": {
                        "type": "string",
                        "description": "The identity of the current holder, can be undefined if owner is still the holder."
                    },
                    "attestationObject": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    },
                    "proof": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    },
                    "verified": {
                        "type": "boolean",
                        "description": "Whether the attestation has been verified."
                    },
                    "verificationFailure": {
                        "type": "string",
                        "description": "The verification failure message."
                    }
                },
                "required": [
                    "@context",
                    "type",
                    "id",
                    "dateCreated",
                    "ownerIdentity",
                    "attestationObject"
                ],
                "additionalProperties": false,
                "description": "Interface describing the collated attestation information."
            },
            "AttestationTransferRequest": {
                "type": "object",
                "properties": {
                    "holderIdentity": {
                        "type": "string",
                        "description": "The new holder identity."
                    }
                },
                "required": [
                    "holderIdentity"
                ],
                "additionalProperties": false,
                "description": "The parameters to be used in the transfer."
            },
            "AuditableItemGraphCreateRequest": {
                "type": "object",
                "properties": {
                    "vertexObject": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "aliasFormat": {
                                    "type": "string"
                                },
                                "aliasObject": {
                                    "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                                }
                            },
                            "required": [
                                "id"
                            ],
                            "additionalProperties": false
                        },
                        "description": "Alternative aliases that can be used to identify the vertex."
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "resourceObject": {
                                    "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                                }
                            },
                            "required": [
                                "id"
                            ],
                            "additionalProperties": false
                        },
                        "description": "The resources attached to the vertex."
                    },
                    "edges": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "edgeRelationship": {
                                    "type": "string"
                                },
                                "edgeObject": {
                                    "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                                }
                            },
                            "required": [
                                "id",
                                "edgeRelationship"
                            ],
                            "additionalProperties": false
                        },
                        "description": "The edges connected to the vertex."
                    }
                },
                "additionalProperties": false,
                "description": "The data to be used in the vertex."
            },
            "AuditableItemGraphUpdateRequest": {
                "type": "object",
                "properties": {
                    "vertexObject": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "aliasFormat": {
                                    "type": "string"
                                },
                                "aliasObject": {
                                    "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                                }
                            },
                            "required": [
                                "id"
                            ],
                            "additionalProperties": false
                        },
                        "description": "Alternative aliases that can be used to identify the vertex."
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "resourceObject": {
                                    "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                                }
                            },
                            "required": [
                                "id"
                            ],
                            "additionalProperties": false
                        },
                        "description": "The resources attached to the vertex."
                    },
                    "edges": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "edgeRelationship": {
                                    "type": "string"
                                },
                                "edgeObject": {
                                    "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                                }
                            },
                            "required": [
                                "id",
                                "edgeRelationship"
                            ],
                            "additionalProperties": false
                        },
                        "description": "The edges connected to the vertex."
                    }
                },
                "additionalProperties": false,
                "description": "The data to be used in the vertex."
            },
            "AuditableItemStreamCreateEntryRequest": {
                "type": "object",
                "properties": {
                    "entryObject": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    }
                },
                "required": [
                    "entryObject"
                ],
                "additionalProperties": false,
                "description": "The data to be used in the stream."
            },
            "AuditableItemStreamCreateRequest": {
                "type": "object",
                "properties": {
                    "streamObject": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    },
                    "entries": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "entryObject": {
                                    "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                                }
                            },
                            "required": [
                                "entryObject"
                            ],
                            "additionalProperties": false
                        },
                        "description": "The entries for the stream."
                    },
                    "immutableInterval": {
                        "type": "number",
                        "description": "After how many entries do we add immutable checks, defaults to service configured value. A value of 0 will disable immutable checks, 1 will be every item, or any other integer for an interval."
                    }
                },
                "additionalProperties": false,
                "description": "The data to be used in the stream."
            },
            "AuditableItemStreamUpdateEntryRequest": {
                "type": "object",
                "properties": {
                    "entryObject": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    }
                },
                "required": [
                    "entryObject"
                ],
                "additionalProperties": false,
                "description": "The data to be used in the entry."
            },
            "AuditableItemStreamUpdateRequest": {
                "type": "object",
                "properties": {
                    "streamObject": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    }
                },
                "additionalProperties": false,
                "description": "The data to be used in the stream."
            },
            "BlobStorageCreateRequest": {
                "type": "object",
                "properties": {
                    "blob": {
                        "type": "string",
                        "description": "The data to store in base64 encoding."
                    },
                    "encodingFormat": {
                        "type": "string",
                        "description": "The mime type of the blob, will be detected if left undefined."
                    },
                    "fileExtension": {
                        "type": "string",
                        "description": "The extension of the blob, will be detected if left undefined."
                    },
                    "metadata": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace to store the data in, defaults to component configured namespace."
                    }
                },
                "required": [
                    "blob"
                ],
                "additionalProperties": false,
                "description": "The body parameters."
            },
            "BlobStorageEntry": {
                "type": "object",
                "properties": {
                    "@context": {
                        "anyOf": [
                            {
                                "type": "string",
                                "const": "https://schema.twindev.org/blob-storage/"
                            },
                            {
                                "type": "array",
                                "minItems": 1,
                                "items": [
                                    {
                                        "type": "string",
                                        "const": "https://schema.twindev.org/blob-storage/"
                                    }
                                ],
                                "additionalItems": {
                                    "type": "string"
                                }
                            }
                        ],
                        "description": "JSON-LD Context."
                    },
                    "type": {
                        "type": "string",
                        "const": "BlobStorageEntry",
                        "description": "JSON-LD Type."
                    },
                    "id": {
                        "type": "string",
                        "description": "The id for the blob."
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date/time when the entry was created."
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date/time when the entry was modified."
                    },
                    "blobSize": {
                        "type": "number",
                        "description": "The size of the data in the blob."
                    },
                    "encodingFormat": {
                        "type": "string",
                        "description": "The mime type for the blob."
                    },
                    "fileExtension": {
                        "type": "string",
                        "description": "The extension."
                    },
                    "metadata": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    },
                    "blob": {
                        "type": "string",
                        "description": "The blob in base64 format, if the includeContent flag was set in the request."
                    }
                },
                "required": [
                    "@context",
                    "type",
                    "id",
                    "dateCreated",
                    "blobSize"
                ],
                "additionalProperties": false,
                "description": "Interface describing a blob storage entry."
            },
            "BlobStorageEntryList": {
                "type": "object",
                "properties": {
                    "@context": {
                        "anyOf": [
                            {
                                "type": "string",
                                "const": "https://schema.twindev.org/blob-storage/"
                            },
                            {
                                "type": "array",
                                "minItems": 1,
                                "items": [
                                    {
                                        "type": "string",
                                        "const": "https://schema.twindev.org/blob-storage/"
                                    }
                                ],
                                "additionalItems": {
                                    "type": "string"
                                }
                            }
                        ],
                        "description": "JSON-LD Context."
                    },
                    "type": {
                        "type": "string",
                        "const": "BlobStorageEntryList",
                        "description": "JSON-LD Type."
                    },
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BlobStorageEntry"
                        },
                        "description": "The list of entries."
                    },
                    "cursor": {
                        "type": "string",
                        "description": "The cursor to get the next chunk of entries."
                    }
                },
                "required": [
                    "@context",
                    "type",
                    "entries"
                ],
                "additionalProperties": false,
                "description": "Interface describing an blob storage entry list."
            },
            "BlobStorageUpdateRequest": {
                "type": "object",
                "properties": {
                    "encodingFormat": {
                        "type": "string",
                        "description": "The mime type of the blob, will be detected if left undefined."
                    },
                    "fileExtension": {
                        "type": "string",
                        "description": "The extension of the blob, will be detected if left undefined."
                    },
                    "metadata": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
                    }
                },
                "additionalProperties": false,
                "description": "The body parameters."
            },
            "ConflictResponse": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "conflicts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The conflicting items."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the error."
                    },
                    "message": {
                        "type": "string",
                        "description": "The message for the error."
                    },
                    "source": {
                        "type": "string",
                        "description": "The source of the error."
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Any additional information for the error."
                    },
                    "stack": {
                        "type": "string",
                        "description": "The stack trace for the error."
                    },
                    "inner": {
                        "$ref": "#/components/schemas/Error"
                    }
                },
                "required": [
                    "conflicts",
                    "message",
                    "name"
                ],
                "description": "The body which contains the error."
            },
            "DidDocument": {
                "type": "object",
                "properties": {
                    "@context": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdContextDefinitionRoot"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id for the document."
                    },
                    "alsoKnownAs": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ],
                        "description": "Aliases for the document."
                    },
                    "controller": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ],
                        "description": "The controller for the document."
                    },
                    "verificationMethod": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/DidDocumentVerificationMethod"
                                }
                            ]
                        },
                        "description": "The verification methods."
                    },
                    "authentication": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/DidDocumentVerificationMethod"
                                }
                            ]
                        },
                        "description": "The authentication methods."
                    },
                    "assertionMethod": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/DidDocumentVerificationMethod"
                                }
                            ]
                        },
                        "description": "The assertion methods."
                    },
                    "keyAgreement": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/DidDocumentVerificationMethod"
                                }
                            ]
                        },
                        "description": "The key agreements."
                    },
                    "capabilityInvocation": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/DidDocumentVerificationMethod"
                                }
                            ]
                        },
                        "description": "The capability invocations."
                    },
                    "capabilityDelegation": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/DidDocumentVerificationMethod"
                                }
                            ]
                        },
                        "description": "The capability delegations."
                    },
                    "service": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DidService"
                        },
                        "description": "The services."
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false,
                "description": "Interface describing a DID Document. Spec https://www.w3.org/TR/did-core/#did-document-properties."
            },
            "DidDocumentVerificationMethod": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the entry."
                    },
                    "controller": {
                        "type": "string",
                        "description": "The controller for the entry."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the entry."
                    },
                    "publicKeyMultibase": {
                        "type": "string",
                        "description": "The public key for the entry. Spec https://datatracker.ietf.org/doc/html/draft-multiformats-multibase-03 ."
                    },
                    "publicKeyJwk": {
                        "$ref": "#/components/schemas/Jwk"
                    },
                    "revocation": {
                        "type": "string",
                        "description": "Multi key partial revocation."
                    }
                },
                "required": [
                    "id",
                    "controller",
                    "type"
                ],
                "additionalProperties": false,
                "description": "Interface describing a DID document verification method."
            },
            "DidService": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the service."
                    },
                    "type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ],
                        "description": "The type of the service."
                    },
                    "serviceEndpoint": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ],
                        "description": "The endpoint for the service."
                    }
                },
                "required": [
                    "id",
                    "type",
                    "serviceEndpoint"
                ],
                "additionalProperties": false,
                "description": "Interface describing a did document service."
            },
            "Error": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name for the error."
                    },
                    "message": {
                        "type": "string",
                        "description": "The message for the error."
                    },
                    "source": {
                        "type": "string",
                        "description": "The source of the error."
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Any additional information for the error."
                    },
                    "stack": {
                        "type": "string",
                        "description": "The stack trace for the error."
                    },
                    "inner": {
                        "$ref": "#/components/schemas/Error"
                    }
                },
                "required": [
                    "name",
                    "message"
                ],
                "additionalProperties": false,
                "description": "Model to describe serialized error."
            },
            "HealthInfo": {
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/HealthStatus"
                    },
                    "components": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the component."
                                },
                                "status": {
                                    "$ref": "#/components/schemas/HealthStatus"
                                },
                                "details": {
                                    "type": "string",
                                    "description": "The details for the status."
                                }
                            },
                            "required": [
                                "name",
                                "status"
                            ],
                            "additionalProperties": false
                        },
                        "description": "The status of the components."
                    }
                },
                "required": [
                    "status"
                ],
                "additionalProperties": false,
                "description": "The status of the server."
            },
            "HealthStatus": {
                "anyOf": [
                    {
                        "type": "string",
                        "const": "ok",
                        "description": "OK."
                    },
                    {
                        "type": "string",
                        "const": "warning",
                        "description": "Warning."
                    },
                    {
                        "type": "string",
                        "const": "error",
                        "description": "Error."
                    }
                ],
                "description": "The health status of the component."
            },
            "IdentityProfileCreateRequest": {
                "type": "object",
                "properties": {
                    "publicProfile": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
                    },
                    "privateProfile": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
                    }
                },
                "additionalProperties": false,
                "description": "The data for the request."
            },
            "IdentityProfileGetResponse": {
                "type": "object",
                "properties": {
                    "identity": {
                        "type": "string",
                        "description": "The identity of the profile, this is the authenticated user identity."
                    },
                    "publicProfile": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
                    },
                    "privateProfile": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
                    }
                },
                "required": [
                    "identity"
                ],
                "additionalProperties": false,
                "description": "The response payload."
            },
            "IdentityProfileListResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "identity": {
                                    "type": "string",
                                    "description": "The identity."
                                },
                                "publicProfile": {
                                    "$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
                                }
                            },
                            "required": [
                                "identity"
                            ],
                            "additionalProperties": false
                        },
                        "description": "The identities."
                    },
                    "cursor": {
                        "type": "string",
                        "description": "An optional cursor, when defined can be used to call find to get more entities."
                    }
                },
                "required": [
                    "items"
                ],
                "additionalProperties": false,
                "description": "The response payload."
            },
            "IdentityProfileUpdateRequest": {
                "type": "object",
                "properties": {
                    "publicProfile": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
                    },
                    "privateProfile": {
                        "$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
                    }
                },
                "additionalProperties": false,
                "description": "The data for the request."
            },
            "ImmutableProofFailure": {
                "anyOf": [
                    {
                        "type": "string",
                        "const": "notIssued",
                        "description": "Proof not yes issued."
                    },
                    {
                        "type": "string",
                        "const": "proofMissing",
                        "description": "Proof missing."
                    },
                    {
                        "type": "string",
                        "const": "cryptoSuiteMismatch",
                        "description": "Crypto suite mismatch."
                    },
                    {
                        "type": "string",
                        "const": "proofTypeMismatch",
                        "description": "Proof type."
                    },
                    {
                        "type": "string",
                        "const": "signatureMismatch",
                        "description": "Signature mismatch."
                    }
                ],
                "description": "The failure reason of the proof."
            },
            "ImmutableProofVerification": {
                "type": "object",
                "properties": {
                    "@context": {
                        "type": "string",
                        "const": "https://schema.twindev.org/immutable-proof/",
                        "description": "JSON-LD Context."
                    },
                    "type": {
                        "type": "string",
                        "const": "ImmutableProofVerification",
                        "description": "JSON-LD Type."
                    },
                    "verified": {
                        "type": "boolean",
                        "description": "Was the verification successful."
                    },
                    "failure": {
                        "$ref": "#/components/schemas/ImmutableProofFailure"
                    }
                },
                "required": [
                    "@context",
                    "type",
                    "verified"
                ],
                "additionalProperties": false,
                "description": "Interface describing an immutable proof verification."
            },
            "Jwk": {
                "type": "object",
                "properties": {
                    "alg": {
                        "$ref": "#/components/schemas/JwtAlgorithms"
                    },
                    "use": {
                        "type": "string",
                        "description": "The intended use for the key."
                    },
                    "key_ops": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The operation(s) that the key is intended to be used for."
                    },
                    "kty": {
                        "type": "string",
                        "description": "The key type parameter."
                    },
                    "n": {
                        "type": "string",
                        "description": "The public key parameters."
                    },
                    "e": {
                        "type": "string",
                        "description": "Exponent parameter."
                    },
                    "d": {
                        "type": "string",
                        "description": "The private key parameters."
                    },
                    "p": {
                        "type": "string",
                        "description": "The private key parameters."
                    },
                    "q": {
                        "type": "string",
                        "description": "The private key parameters."
                    },
                    "dp": {
                        "type": "string",
                        "description": "The private key parameters."
                    },
                    "dq": {
                        "type": "string",
                        "description": "The private key parameters."
                    },
                    "qi": {
                        "type": "string",
                        "description": "The private key parameters."
                    },
                    "kid": {
                        "type": "string",
                        "description": "The key ID."
                    }
                },
                "required": [
                    "kty"
                ],
                "additionalProperties": {
                    "description": "Additional fields in the key."
                },
                "description": "The fields in a JSON Web Key."
            },
            "JwtAlgorithms": {
                "anyOf": [
                    {
                        "type": "string",
                        "const": "HS256",
                        "description": "HMAC using SHA-256."
                    },
                    {
                        "type": "string",
                        "const": "EdDSA",
                        "description": "EdDSA using Ed25519."
                    }
                ],
                "description": "The cryptographic algorithms supported for JSON Web Tokens and JSON Web Keys."
            },
            "LogEntry": {
                "type": "object",
                "properties": {
                    "level": {
                        "$ref": "#/components/schemas/LogLevel"
                    },
                    "source": {
                        "type": "string",
                        "description": "The source of the log entry."
                    },
                    "ts": {
                        "type": "number",
                        "description": "The timestamp of the log entry, if left blank will be populated by the connector."
                    },
                    "message": {
                        "type": "string",
                        "description": "The message."
                    },
                    "error": {
                        "$ref": "#/components/schemas/Error"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Optional data for the message."
                    }
                },
                "required": [
                    "level",
                    "source",
                    "message"
                ],
                "additionalProperties": false,
                "description": "Interface describing a log entry."
            },
            "LogLevel": {
                "type": "string",
                "enum": [
                    "info",
                    "error",
                    "warn",
                    "trace",
                    "debug"
                ],
                "description": "Log level."
            },
            "LoggingListResponse": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LogEntry"
                        },
                        "description": "The entities, which can be partial if a limited keys list was provided."
                    },
                    "cursor": {
                        "type": "string",
                        "description": "An optional cursor, when defined can be used to call find to get more entities."
                    }
                },
                "required": [
                    "entities"
                ],
                "additionalProperties": false,
                "description": "The response payload."
            },
            "LoginRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address for the user."
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the user."
                    }
                },
                "required": [
                    "email",
                    "password"
                ],
                "additionalProperties": false,
                "description": "The login details."
            },
            "LoginResponse": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The access token, if it uses a mechanism with public access."
                    },
                    "expiry": {
                        "type": "number",
                        "description": "The expiry time of the token."
                    }
                },
                "required": [
                    "expiry"
                ],
                "additionalProperties": false,
                "description": "The login response details."
            },
            "MetricType": {
                "anyOf": [
                    {
                        "type": "number",
                        "const": 0,
                        "description": "Counter."
                    },
                    {
                        "type": "number",
                        "const": 1,
                        "description": "Increment Decrement Counter."
                    },
                    {
                        "type": "number",
                        "const": 2,
                        "description": "Gauge."
                    }
                ],
                "description": "The types of metrics."
            },
            "NftMintRequest": {
                "type": "object",
                "properties": {
                    "issuer": {
                        "type": "string",
                        "description": "The issuer for the NFT, will also be the initial owner."
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag for the NFT."
                    },
                    "immutableMetadata": {
                        "description": "The immutable metadata for the NFT."
                    },
                    "metadata": {
                        "description": "The metadata for the NFT."
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace of the connector to use for the NFT, defaults to component configured namespace."
                    }
                },
                "required": [
                    "issuer",
                    "tag"
                ],
                "additionalProperties": false,
                "description": "The data to be used in the minting."
            },
            "NftResolveResponse": {
                "type": "object",
                "properties": {
                    "issuer": {
                        "type": "string",
                        "description": "The issuer of the NFT."
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of the NFT."
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag data for the NFT."
                    },
                    "immutableMetadata": {
                        "description": "The immutable data for the NFT."
                    },
                    "metadata": {
                        "description": "The metadata for the NFT."
                    }
                },
                "required": [
                    "issuer",
                    "owner",
                    "tag"
                ],
                "additionalProperties": false,
                "description": "The data that was resolved."
            },
            "NftTransferRequest": {
                "type": "object",
                "properties": {
                    "recipient": {
                        "type": "string",
                        "description": "The recipient for the NFT."
                    },
                    "metadata": {
                        "description": "The metadata for the NFT."
                    }
                },
                "required": [
                    "recipient"
                ],
                "additionalProperties": false,
                "description": "The data to be used in the transfer."
            },
            "NftUpdateRequest": {
                "type": "object",
                "properties": {
                    "metadata": {
                        "description": "The metadata for the NFT."
                    }
                },
                "additionalProperties": false,
                "description": "The data to be used in the update."
            },
            "NotFoundResponse": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "notFoundId": {
                        "type": "string",
                        "description": "The id if the item that was not found."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the error."
                    },
                    "message": {
                        "type": "string",
                        "description": "The message for the error."
                    },
                    "source": {
                        "type": "string",
                        "description": "The source of the error."
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Any additional information for the error."
                    },
                    "stack": {
                        "type": "string",
                        "description": "The stack trace for the error."
                    },
                    "inner": {
                        "$ref": "#/components/schemas/Error"
                    }
                },
                "required": [
                    "message",
                    "name"
                ],
                "description": "The body which contains the error."
            },
            "RefreshTokenResponse": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The refreshed token, if it uses a mechanism with public access."
                    },
                    "expiry": {
                        "type": "number",
                        "description": "The expiry time of the token."
                    }
                },
                "required": [
                    "expiry"
                ],
                "additionalProperties": false,
                "description": "The refresh token details."
            },
            "ServerInfo": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The application name."
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the server."
                    }
                },
                "required": [
                    "name",
                    "version"
                ],
                "additionalProperties": false,
                "description": "The information about the server."
            },
            "ServerSpecResponse": {
                "description": "The spec for the server."
            },
            "SortDirection": {
                "anyOf": [
                    {
                        "type": "string",
                        "const": "asc",
                        "description": "Ascending."
                    },
                    {
                        "type": "string",
                        "const": "desc",
                        "description": "Descending."
                    }
                ],
                "description": "The sort directions."
            },
            "TelemetryAddMetricValueRequest": {
                "type": "object",
                "properties": {
                    "value": {
                        "anyOf": [
                            {
                                "type": "string",
                                "const": "inc"
                            },
                            {
                                "type": "string",
                                "const": "dec"
                            },
                            {
                                "type": "number"
                            }
                        ],
                        "description": "The value for the update operation."
                    },
                    "customData": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "The custom data for the update operation."
                    }
                },
                "required": [
                    "value"
                ],
                "additionalProperties": false,
                "description": "The data to be used in the update."
            },
            "TelemetryGetMetricResponse": {
                "type": "object",
                "properties": {
                    "metric": {
                        "$ref": "#/components/schemas/TelemetryMetric"
                    },
                    "value": {
                        "$ref": "#/components/schemas/TelemetryMetricValue"
                    }
                },
                "required": [
                    "metric",
                    "value"
                ],
                "additionalProperties": false,
                "description": "The body parameters."
            },
            "TelemetryListResponse": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TelemetryMetric"
                        },
                        "description": "The metrics."
                    },
                    "cursor": {
                        "type": "string",
                        "description": "An optional cursor, when defined can be used to call find to get more entities."
                    }
                },
                "required": [
                    "entities"
                ],
                "additionalProperties": false,
                "description": "The response payload."
            },
            "TelemetryMetric": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the metric."
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the metric."
                    },
                    "type": {
                        "$ref": "#/components/schemas/MetricType"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description."
                    },
                    "unit": {
                        "type": "string",
                        "description": "The unit the metric describes."
                    }
                },
                "required": [
                    "id",
                    "label",
                    "type"
                ],
                "additionalProperties": false,
                "description": "Interface describing a telemetry metric."
            },
            "TelemetryMetricValue": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the metric value."
                    },
                    "ts": {
                        "type": "number",
                        "description": "The timestamp of the metric."
                    },
                    "value": {
                        "type": "number",
                        "description": "The value of the metric."
                    },
                    "customData": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "The custom data for the metric value."
                    }
                },
                "required": [
                    "id",
                    "ts",
                    "value"
                ],
                "additionalProperties": false,
                "description": "Interface describing a telemetry metric value."
            },
            "TelemetryUpdateMetricRequest": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label of the metric."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the metric."
                    },
                    "unit": {
                        "type": "string",
                        "description": "The unit of the metric."
                    }
                },
                "required": [
                    "label"
                ],
                "additionalProperties": false,
                "description": "The data to be used in the update."
            },
            "TelemetryValuesListResponse": {
                "type": "object",
                "properties": {
                    "metric": {
                        "$ref": "#/components/schemas/TelemetryMetric"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TelemetryMetricValue"
                        },
                        "description": "The metric values."
                    },
                    "cursor": {
                        "type": "string",
                        "description": "An optional cursor, when defined can be used to call find to get more entities."
                    }
                },
                "required": [
                    "metric",
                    "entities"
                ],
                "additionalProperties": false,
                "description": "The response payload."
            },
            "VerifyDepth": {
                "anyOf": [
                    {
                        "type": "string",
                        "const": "none",
                        "description": "Do not verify any signatures."
                    },
                    {
                        "type": "string",
                        "const": "current",
                        "description": "Verify only the most recent signature."
                    },
                    {
                        "type": "string",
                        "const": "all",
                        "description": "Verify all the signatures."
                    }
                ],
                "description": "How deep to verify the signatures."
            }
        },
        "securitySchemes": {
            "jwtBearerAuthScheme": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}